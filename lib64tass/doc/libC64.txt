

    #######
    #   bit
    #######

    #   bit_or_(0-8)    

    #   bit_and_(0-7)   

    #   test_bit_(?)
    
    #   if_bit_0    jmp (z?=0)

    #   if_bit_1    jmp (z!=0)

    #   if_true     jmp (c=1)
    
    #   if_false    jmp (c=0)

    #   if_string_lt    (a?=ff)
     
    #   if_string_eq    (a?=00) 
     
    #   if_string_gt    (a?=01) 
 

    #######
    #   zero page
    #######
   
        zpa		= $02
        zpx		= $2a
        zpy		= $52

        zpByte0 = $fb
        zpByte1 = $fc
        zpByte2 = $fd
        zpByte3 = $fe

        zpWord0     = $fb
        zpWord0hi   = $fb
        zpWord0lo   = $fb+1

        zpWord1     = $fd
        zpWord1hi   = $fd
        zpWord1lo   = $fd+1

    #   kernal
    
    #######
    #   sys
    #######
    
        CHROUT          = $FFD2     ;   a
        CHRIN           = $ffcf     ;   
        STROUT          = $ab1e     ;       
        OUT_U16         = $BDCD     ;   ax
        SCREEN_XY       = $fff0     ;   C=1 read cursor pos(xy)   C=0 set cursor pos(xy) 
        SCREEN_WH       = $ffed     ;   
        SCREEN_CLEAR    = $e544     ;
        SCREEN_HOME     = $e566     ;
            
    #######
    #   color
    #######
    
        black          =       0               ;       0000
        white          =       1               ;       0001
        red            =       2               ;       0010
        cyan           =       3               ;       0011
        violet         =       4               ;       0100
        green          =       5               ;       0101
        blue           =       6               ;       0110
        yellow         =       7               ;       0111

        orange         =       8               ;       1000
        brown          =       9               ;       1001
        light_red      =       10              ;       1010
        dark_grey      =       11              ;       1011
        grey           =       12              ;       1100
        light_green    =       13              ;       1101
        light_blue     =       14              ;       1110
        light_grey     =       15              ;       1111


    #######
    #   char
    #######
    
    
        home            =   19
        nl              =   '\n'
        ??  ;clear_screen   =   147    ;   restore original color
        space           =   ' '
        dollar          =   '$'
        a               =   1
    
    #######
    #   c64
    #######
    
    #   address
        
        screen_addr =   $0400
        color_addr  =   $d800
        
    #   kernal  
        
        screen_control_register_1   =   53265
        screen_control_register_2   =   53270

    #   
        set_text_mode_on 
        set_text_mode_standard_on
        set_bitmap_mode_off
    #   
        set_text_mode_off 
        set_text_mode_standard_off
        set_bitmap_mode_on
    #
        set_text_mode_extended_on
    #
        set_text_mode_extended_off
    #
        set_text_mode_multicolor_on
        set_bitmap_mode_multicolor_on
    #
        set_text_mode_multicolor_off        
        set_bitmap_mode_multicolor_off
        
    #   set
    
            set_bitmap_mode_320x200_on
            set_bitmap_mode_320x200_off
            set_bitmap_mode_160x200_on  
            set_bitmap_mode_160x200_off 
            
    #   check   ( output : c 0/1 )
    
            check_text_mode_standard    
            check_text_mode_extended    
            check_bitmap_mode         
            check_multi_color         
            check_bitmap_mode_320x200   
            check_bitmap_mode_160x200   

    #   peekw   (a,y)               := (word)*(zpWord0)
    #   pokew   (word)*(zpWord0)    := (a:y)
    
    #######
    # macro
    #######

    load_zpByte0    var
    load_zpByte1    var
    load_zpWord0    var
    load_zpWord1    var

    load_address_zpWord0	address
    load_address_zpWord1	address

    load_var_ax	var
    load_var_ay	var
    
    load_address_ax	address
    load_address_ay	address

    if_true  jmp
    if_false jmp

    uByte   a,1
    sByte   b,2
    uWord   a,1
    sWord   b,2
   

    #######
    #   mem
    #######
    
    ; ........................................... mem.copy
    ;
    ;   input   :
    ;               source address  ->  zpWord0
    ;               dest   address  ->  zpWord1
    ;               ay              ->  size
    ;   output  :
    ;               //
    
    # copy 
   

    ; ........................................... mem.set
    ;
    ;   input   :   
    ;               zpWord0     begin
    ;               xy          length
    ;               a           value

    # set_byte 

    ; ........................................... mem.set_word
    ;
    ;   input   :   
    ;               zpWord0     begin
    ;               zpWord1     length
    ;               ay          value

    # set_word 

    ; ........................................... mem.copy_nbyte_from_to
    ;
    ;   input   :   
    ;               zpWord0     from
    ;               zpWord1     to
    ;               xy          value

    # copy_npage_from_to
    
    
    
    
    
;;;
;;
;


