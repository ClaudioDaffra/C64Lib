
###########
    stack
###########

    stack
    
        .weak
            lo = $ce00      ;   ce00    +   ff
            hi = $cf00      ;   cf00    +   ff
        .endweak

        pointer    .byte    0xff    ;   top


        ; ------------------------------------------------- push/pop byte
        ;
        ;   input   :   a  -> push
        ;   output  :   a  <- pop
        ;
        
        #   push_byte
        #   pop_byte
        
        ; ------------------------------------------------- push/pop word
        ;
        ;   input   :   ay  -> push
        ;   output  :   ay  <- pop
        ;
        
        #   push_byte
        #   pop_byte

        ; ------------------------------------------------- poke/peek word
        ;
        ;   input   :   a   ->   poke stack.word,a  (stack.lo+1/hi+1)
        ;   output  :   a   <-   peek stack.word    (stack.lo+1/hi+1)
        ;
        
        #   poke   ,   write_byte_to_address_on_stack   
        #   peek   ,   read_byte_from_address_on_stack
        
        ;
        
        ; ------------------------------------------------- push_sp , pop_sp
        ;
        ;   input    :   /
        ;   output   :   /
        ;   
        
        #   push_sp
        #   pop_sp
        
        ; ------------------------------------------------- fast stack multiplication

        mul_byte_3
        mul_word_3
        mul_byte_5
        mul_word_5
        mul_byte_6
        mul_word_6
        mul_byte_7
        mul_word_7
        mul_byte_9
        mul_word_9
        mul_byte_10
        mul_word_10
        mul_byte_11
        mul_byte_12
        mul_word_12
        mul_byte_13
        mul_byte_14
        mul_byte_15
        mul_word_15
        mul_byte_20
        mul_word_20
        mul_byte_25
        mul_word_25
        mul_byte_40
        mul_word_40
        mul_byte_50
        mul_word_50
        mul_byte_80
        mul_word_80
        mul_byte_100
        mul_word_100
        mul_word_320
        mul_word_640

        ; ------------------------------------------------- fast stack operator

        neg_b
        neg_w
        inv_w
        
        bitand_b
        bitor_b
        bitxor_b
        bitand_w
        bitor_w
        bitxor_w
        
        add_w
        sub_w
        
        mul_b
        mul_w
        
        idiv_b
        idiv_ub
        idiv_uw
        idiv_w

 ; ------------------------------------------------------------- compare
    
        equal_b
        equal_w
        
        notequal_b
        notequal_w
        
        less_ub
        less_b
        less_uw
        less_w
        
        lesseq_ub
        lesseq_b
        lesseq_u 
        lesseq_w
        
        greater_ub
        greater_b
        greater_uw
        greater_w
        
        greatereq_ub
        greatereq_b
        greatereq_uw
        greatereq_w
        

        ; ------------------------------------------------------------- compare 0
        
        equalzero_b
        equalzero_w
        
        notequalzero_b
        notequalzero_w
        
        lesszero_b
        lesszero_w
        
        greaterzero_ub
        greaterzero_sb
        
        greaterzero_uw
        greaterzero_sw
        
        lessequalzero_sb
        lessequalzero_sw
        
        greaterequalzero_sb
        greaterequalzero_sw

        ; ................................................. signed extension
        ;
        ; -- sign extend the (signed) byte on the stack to full 16 bits 
        ;
        
        sign_extend_byte
        
        ; ................................................. signed extension
        ;
        ; -- sign extend the (signed) byte on the stack to full 16 bits
        ;    
        ;   input  : stack.lo+1 stack.hi+1
        ;   output : stack.lo+1 stack.hi+1
        
        abs_b
        abs_w
    
    
;;;
;;
;



 