
;***********
;   array
;***********

    ;........................................................................... sort_u8
    ; 
    ; sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
    ;
    ; input:    address of array to sort in zpWord0, 
    ;           length in A
    ;
    
    sort_u8

    ;........................................................................... sort_s8  [KO]
    ;
    ; sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
    ;
    ; input:    address of array to sort in zpWord0, 
    ;           length in A
    ; first, put pointer BEFORE array
    
    sort_s8
    

    ;........................................................................... sort_u16  
    ; 
    ; sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
    ;
    ; input:    address of array to sort in zpWord0, 
    ;           length in A
    ;
    ; P.S.      first: subtract 2 of the pointer
    ;    
            
    sort_u16 
    

    ;........................................................................... sort_s16
    ; 
    ; sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
    ; input:  address of array to sort in zpWord0, length in A
    ; first: subtract 2 of the pointer
    
    sort_s16    
    
    ; .................................................... reverse_us8
    ;
    ; reverse an array of bytes (in-place)
    ;
    ; inputs:   pointer to array in zpWord0, 
    ;           length in A
    ;
    
    reverse_us8    
    

    ;........................................................................... reverse_u16
    ;
    ; reverse an array of words (in-place)
    ;
    ; inputs:  pointer to array in zpWord0, 
    ;           length in A

    reverse_us16   
    
    
    ;............................................................ rol/rol2 ror/ro2 ub
    ;
    ; -- rol  a ubyte in an array
    ; -- ror  a ubyte in an array
    ; -- rol2 a ubyte in an array
    ; -- ror2 a ubyte in an array
    ;
    ;   input   :
    ;               zpWord0     <-  address array
    ;               y           <-  length
    
    rol_ub
    ror_ub
    rol2_ub
    ror2_ub
    
    ;   ....................................................... containment_byte
    ;
    ; -- check if a value exists in a byte array.
    ;    input  :   
    ;               zpWord0: address of the byte array
    ;               A = byte to check
    ;               Y = length of array (>=1).
    ;    output :   
    ;               boolean 0/1 in A.
    ;               (Carry) 1 , 0 
    ;
    
    containment_byte    
    
    ;   ....................................................... containment_word
    ;
    ; -- check if a value exists in a byte array.
    ;    input  :   
    ;               zpWord0: address of the byte array
    ;               zpWord1: word to check
    ;               Y = length of array (>=1).
    ;    output :   
    ;               boolean 0/1 in A.
    ;              (Carry) 1 , 0 
    ;   

    containment_word

;***********
;   index
;***********

    .comment

        dim1  :=       (x) * size
        dim2  :=  ((   (x) * maxy ) + y )* size
        dim3  :=  (((( (z) * maxz ) * maxy ) + y ) * maxz +x ) * size

    .endc

    ;  ............................................. calc index array
    ;
    ;  input   :   x y  maxy size
    ;  output  :   zpWord0
    ;

    array SHORT must be < 256 length && index < 256

        array.short.dim1.size1      ;   byte
        array.short.dim1.size2      ;   word
        array.short.dim1.size4      ;   float4
        array.short.dim1.size5      ;   float5
        array.short.dim1.sizex      ;   struct
        
        array.short.dim2.size1      ;   byte
        array.short.dim2.size2      ;   word
        array.short.dim2.size4      ;   float4
        array.short.dim2.size5      ;   float5
        array.short.dim2.sizex      ;   struct

    array SMALL must be < 65535 length && index < 256

        array.small.dim1.size       ;   byte,word,float4,float5,struct
        array.small.dim2.size       ;   byte,word,float4,float5,struct
        
;;;
;;
;


