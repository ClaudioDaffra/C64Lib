
###########
    string
###########

    # string.length
    
    ;--------------------------------------------------------------- length
    ;   input   :   a/y :   address string
    ;   output  :   a   :   length


    ;--------------------------------------------------------------- left
    ;   input   :   
    ;              address string zpWord0 source
    ;              address string zpWord1 dest
    ;              a   left
    ;   output  :  //
    
    # string.left 

    ;--------------------------------------------------------------- right
    ;   input   :   
    ;              address string zpWord0 source
    ;              address string zpWord1 dest
    ;              a   right
    ;   output  :  //
    
    # string.right 

    ;--------------------------------------------------------------- mid
    ;   input   :   
    ;              address string zpWord0 source
    ;              address string zpWord1 dest
    ;              a    start
    ;              y    length
    ;   output  :  //
    
    # string.mid
        
    ;--------------------------------------------------------------- find char
    ;   input   :   
    ;               address string zpWord0 source
    ;               a    char
    ;   output  :
    ;               (C=1)   found
    ;               (c=0)   not found
    
    # string.find_char
    
    ;--------------------------------------------------------------- copy
    ;   input   :   
    ;              address string zpWord0 source
    ;              address string zpWord1 dest
    ;   output  :
    ;              a length string copied
    ;
    ;  zpWord1 = zpWord0
    ;
    
    # copy 
    
    ;--------------------------------------------------------------- compare
    ;   input   :   
    ;              address string zpWord0 source
    ;              address string zpWord1 dest
    ;   output  :
    ;              -1,0,1 in A, depeding on the ordering.
    ;
    ;   if_string_eq    label_eq
    ;   if_string_gt    label_gt
    ;   if_string_lt    label_lt
  
    # compare
    
    ;--------------------------------------------------------------- upper / lower
    ;   input   :   
    ;              address string zpWord0 source
    ;   output  :   
    ;              address string zpWord0 dest
    
    # lower    .proc
    
    # upper    .proc

    ;----------------------------------------- pattern matching of a string.
    ;
    ; Input:  
    ;           zpWord0  :  string
    ;           zpWord1  :  pattern matching
    ;
    ; Output: 
    ;           A = 1 if the string matches the pattern, A = 0 if not.
    ;           (C) = 1 found   ,   (C) = 0 not found

    # pattern_match 
    
;;;
;;
;



 