
###########
    math
###########

;............................................... 

;   every logical compare, return always 0/1 Carry set or Not
;   if_true / if_false check carry

;...............................................    useful macro

    u16_add_1   (word)
    u16_sub_1   (word)
    if_u16_gt_0 (word),(jump)

;...............................................    types 

    .byte   unsigned byte   u8
    .char   signed   byte   s8
    .word   unsigned word   u16
    .sint   signed   word   s16

;...............................................    math (c) zpWord0    / zpWord1

    #   math.u8_cmp_eq      ?=
    #   math.u8_cmp_gt      >    
    #   math.u8_cmp_lt      <  
    #   math.u8_cmp_ge      >=
    #   math.u8_cmp_le      <= 
    
    #   math.s8_cmp_eq      ?=
    #   math.s8_cmp_gt      >
    #   math.s8_cmp_lt      <
    #   math.s8_cmp_ge      >=
    #   math.s8_cmp_le      <=
    
    #   math.u16_cmp_eq     ?=
    #   math.u16_cmp_gt     > 
    #   math.u16_cmp_lt     <
    #   math.u16_cmp_gt     >=
    #   math.u16_cmp_lt     <=
    
    #   math.s16_cmp_eq     ?=
    #   math.s16_cmp_gt     >
    #   math.s16_cmp_lt     <
    #   math.s16_cmp_gt     >=
    #   math.s16_cmp_lt     <=

    ; ......................................................... AY cmp zpWord1
    ;
    ;   input   :   ay , zpWord1
    ;   output  :   a   0 >=
    ;           :       1 <
    ;
    
    reg_cmp_s16_lt   

    reg_cmp_lesseq_u16    
    
    reg_cmp_lesseq_s16 
    
    ; ---------------------------------------------------------------   mul_bytes
    ;
    ;   multiply 2 bytes A and Y, result as byte in A  
    ;   (signed or unsigned)
    ;
    ;   input   :   a,y
    ;   output  :   a
    
    #   mul_bytes

    ; --------------------------------------------------------------- mul_bytes_into_u16
    ;
    ;   multiply 2 bytes A and Y, result as word in A/Y (unsigned)
    ;
    ;   input   :   a,y
    ;   output  :   a:y
    ;
    
    #   mul_bytes_into_u16

    ;..........................................................................
    ;
    ;   multiply two 16-bit words into a 32-bit zpDWord0  (signed and unsigned)
    ;
    ;      input    :
    ;   
    ;           A/Y             = first 16-bit number, 
    ;           zpWord0 in ZP   = second 16-bit number
    ;
    ;      output   :
    ;        
    ;           zpDWord0  4-bytes/32-bits product, LSB order (low-to-high)
    ;
    ;     result    :     zpDWord0  :=  zpWord0 * zpWord1
    ;
    
    #   multiply_words    

    ;........................................ div_s8
    ;
    ;   divide A by Y, result quotient in A, remainder in Y   (signed)
    ;
    ;   Inputs:
    ;       a       =   8-bit numerator
    ;       y       =   8-bit denominator
    ;   Outputs:
    ;       a       =   a / y       ( signed   )
    ;       y       =   remainder   ( unsigned ) 
    ;
    
    #   div_s8    

    ;........................................ div_u8
    ;
    ;   divide A by Y, result quotient in A, remainder in Y   (unsigned)
    ;
    ;   Inputs:
    ;       a       =   8-bit numerator
    ;       y       =   8-bit denominator
    ;   Outputs:
    ;       a       =   a / y       ( unsigned   )
    ;       y       =   remainder   ( unsigned ) 
    ;

    #   div_u8

    ;.......................................................................    div_u16
    ;
    ;   divide two unsigned words (16 bit each) into 16 bit results
    ;
    ;    input:  
    ;            zpWord0    :   16 bit number, 
    ;            A/Y        :   16 bit divisor
    ;    output: 
    ;            zpWord1    :   16 bit remainder, 
    ;            A/Y        :   16 bit division result
    ;            flag V     :   1 = division by zero
    ;
    ;   signed word division: make everything positive and fix sign afterwards
        
    #   div_s16
    
    ;.......................................................................    div_u16
    ;
    ;   divide two unsigned words (16 bit each) into 16 bit results
    ;
    ;    input:  
    ;            zpWord0    :   16 bit number, 
    ;            A/Y        :   16 bit divisor
    ;    output: 
    ;            zpWord1    :   in ZP: 16 bit remainder, 
    ;            A/Y        :   16 bit division result
    ;            flag V     :   1 = division by zero
    ;
    
    #    div_u16
    
    ;.......................................................................
    ;
    ;   optimized mul byte/word
    ;
    ;.......................................................................
    

    ;............................................................   lsr_byte_A
    ;
    ;   support for bit shifting that is too large to be unrolled:
    ;   lsr signed byte in A times the value in Y (assume >0)        
    ;
    ;   shift a >> y
    ;
    
    #   shift_right
    #   lsr_byte_A  

    ;............................................................   lsr_byte_A
    ;
    ;   -- calculate square root of signed word in AY, result in AY
    ;
    ;   input   :   ay
    ;   output  :   ay
    ;
    ; routine by Lee Davsion, source: http://6502.org/source/integers/square.htm
    ; using this routine is about twice as fast as doing a regular multiplication.
    ;
    ; Calculates the 16 bit unsigned integer square of the signed 16 bit integer in
    ; Numberl/Numberh.  The result is always in the range 0 to 65025 and is held in
    ; Squarel/Squareh
    ;
    ; The maximum input range is only +/-255 and no checking is done to ensure that
    ; this is so.
    ;
    ; This routine is useful if you are trying to draw circles as for any circle
    ;
    ; x^2+y^2=r^2 where x and y are the co-ordinates of any point on the circle and
    ; r is the circle radius
    
    #   square
    
    ;

    ;............................................... abs_b abs_w
    ;
    ; -- AY = abs(A)  (abs always returns unsigned word)
    ;
    ;   input   :   signed   a      ,   signed   ay
    ;   output  :   unsigned ay     ,   unsigned ay 
    ;
    
    # abs_b
    # abs_w

    ;   ........................................................ sign
    ;
    ;   sign_b  sign_ub
    ;   sign_w  sign_uw
    ;
    ;   input   :   a   ay
    ;   output  :   1 + ,   -1  -   ,   0   =
    ;
    
    # sign_b
    # sign_ub
    # sign_uw
    # sign_w
 
    ;   ..................................................................... sqrt
    ;
    ; integer square root from  http://6502org.wikidot.com/software-math-sqrt
    ;
    ;   input   :   ay  
    ;   output  :   a
    
    #   sqrt
    
    ;   ........................................................ remainder

    mod_ub    .proc
        jsr  math.div_u8
        tya                 ;remainer
        rts
    .pend

    mod_uw    .proc
        jsr  math.div_u16
        lda zpWord1
        ldy zpWord1+1   ;   remainder
        rts
    .pend
    
;;;
;;
;



 